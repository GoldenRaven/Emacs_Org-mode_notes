* Emacs Org mode的两种table
Emacs Org mode中的表格有两种，可以用快捷键 ~C-c ~~ 来调用 ~org-table-convert~
来进行相互转换。

#+BEGIN_EXAMPLE
|--------------------------+----------------------------------------|
| 梯度下降（Gradient descending） | 标准方程（Normal equation）              |
|--------------------------+----------------------------------------|
| 需要选择适当的学习率\eta | 不需要学习率\eta                       |
|--------------------------+----------------------------------------|
| 需要多次迭代             | 直接解析求解                           |
|--------------------------+----------------------------------------|
| 在特征很多时仍工作很好   | 复杂度O(n^3)，特征矩阵维度大时不宜考虑   |
|--------------------------+----------------------------------------|
| 能应用在更复杂的算法中（如逻辑回归） | 需要矩阵可逆（满秩）                   |
|--------------------------+----------------------------------------|
#+END_EXAMPLE

上述table在Github下被渲染为：

|--------------------------+----------------------------------------|
| 梯度下降（Gradient descending） | 标准方程（Normal equation）              |
|--------------------------+----------------------------------------|
| 需要选择适当的学习率\eta | 不需要学习率\eta                       |
|--------------------------+----------------------------------------|
| 需要多次迭代             | 直接解析求解                           |
|--------------------------+----------------------------------------|
| 在特征很多时仍工作很好   | 复杂度O(n^3)，特征矩阵维度大时不宜考虑   |
|--------------------------+----------------------------------------|
| 能应用在更复杂的算法中（如逻辑回归） | 需要矩阵可逆（满秩）                   |
|--------------------------+----------------------------------------|
而如下的table
#+BEGIN_EXAMPLE
| 梯度下降（Gradient descending）      | 标准方程（Normal equation）            |
| 需要选择适当的学习率\eta             | 不需要学习率\eta                       |
| 需要多次迭代                         | 直接解析求解                           |
| 在特征很多时仍工作很好               | 复杂度O(n^3)，特征矩阵维度大时不宜考虑 |
| 能应用在更复杂的算法中（如逻辑回归） | 需要矩阵可逆（满秩）                   |
#+END_EXAMPLE
则被Github渲染为：
| 梯度下降（Gradient descending）      | 标准方程（Normal equation）            |
| 需要选择适当的学习率\eta             | 不需要学习率\eta                       |
| 需要多次迭代                         | 直接解析求解                           |
| 在特征很多时仍工作很好               | 复杂度O(n^3)，特征矩阵维度大时不宜考虑 |
| 能应用在更复杂的算法中（如逻辑回归） | 需要矩阵可逆（满秩）                   |

* table的转置
可以直接使用Emacs函数 ~org-table-transpose-table-at-poing~ 来将table转置，
效果如下：

|--------------------------+----------------------------------------|
| 梯度下降（Gradient descending） | 标准方程（Normal equation）              |
|--------------------------+----------------------------------------|
| 需要选择适当的学习率\eta | 不需要学习率\eta                       |
|--------------------------+----------------------------------------|
| 需要多次迭代             | 直接解析求解                           |
|--------------------------+----------------------------------------|
| 在特征很多时仍工作很好   | 复杂度O(n^3)，特征矩阵维度大时不宜考虑   |
|--------------------------+----------------------------------------|
| 能应用在更复杂的算法中（如逻辑回归） | 需要矩阵可逆（满秩）                   |
|--------------------------+----------------------------------------|
转置后：
+---------------------------------+--------------------------+--------------+----------------------------------------+--------------------------------------+
| 梯度下降（Gradient descending） | 需要选择适当的学习率\eta | 需要多次迭代 | 在特征很多时仍工作很好                 | 能应用在更复杂的算法中（如逻辑回归） |
+---------------------------------+--------------------------+--------------+----------------------------------------+--------------------------------------+
| 标准方程（Normal equation）     | 不需要学习率\eta         | 直接解析求解 | 复杂度O(n^3)，特征矩阵维度大时不宜考虑 | 需要矩阵可逆（满秩）                 |
+---------------------------------+--------------------------+--------------+----------------------------------------+--------------------------------------+

#+begin_example
注意：如果不能直接转置，需要先用C-c ~转换成默认的table。
#+end_example
